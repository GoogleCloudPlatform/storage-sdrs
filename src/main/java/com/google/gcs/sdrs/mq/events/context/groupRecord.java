/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.google.gcs.sdrs.mq.events.context;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class groupRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8326354583280334583L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"groupRecord\",\"namespace\":\"com.google.gcs.sdrs.mq.events.context\",\"fields\":[{\"name\":\"groupID\",\"type\":\"string\",\"doc\":\"Unique event group ID\"},{\"name\":\"sequenceNumber\",\"type\":\"int\",\"doc\":\"Event sequence in the group. \"},{\"name\":\"totalNumber\",\"type\":\"int\",\"doc\":\"Total number of events in the group.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<groupRecord> ENCODER =
      new BinaryMessageEncoder<groupRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<groupRecord> DECODER =
      new BinaryMessageDecoder<groupRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<groupRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<groupRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<groupRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this groupRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a groupRecord from a ByteBuffer. */
  public static groupRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique event group ID */
  @Deprecated public java.lang.CharSequence groupID;
  /** Event sequence in the group.  */
  @Deprecated public int sequenceNumber;
  /** Total number of events in the group. */
  @Deprecated public int totalNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public groupRecord() {}

  /**
   * All-args constructor.
   * @param groupID Unique event group ID
   * @param sequenceNumber Event sequence in the group. 
   * @param totalNumber Total number of events in the group.
   */
  public groupRecord(java.lang.CharSequence groupID, java.lang.Integer sequenceNumber, java.lang.Integer totalNumber) {
    this.groupID = groupID;
    this.sequenceNumber = sequenceNumber;
    this.totalNumber = totalNumber;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return groupID;
    case 1: return sequenceNumber;
    case 2: return totalNumber;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: groupID = (java.lang.CharSequence)value$; break;
    case 1: sequenceNumber = (java.lang.Integer)value$; break;
    case 2: totalNumber = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'groupID' field.
   * @return Unique event group ID
   */
  public java.lang.CharSequence getGroupID() {
    return groupID;
  }

  /**
   * Sets the value of the 'groupID' field.
   * Unique event group ID
   * @param value the value to set.
   */
  public void setGroupID(java.lang.CharSequence value) {
    this.groupID = value;
  }

  /**
   * Gets the value of the 'sequenceNumber' field.
   * @return Event sequence in the group. 
   */
  public java.lang.Integer getSequenceNumber() {
    return sequenceNumber;
  }

  /**
   * Sets the value of the 'sequenceNumber' field.
   * Event sequence in the group. 
   * @param value the value to set.
   */
  public void setSequenceNumber(java.lang.Integer value) {
    this.sequenceNumber = value;
  }

  /**
   * Gets the value of the 'totalNumber' field.
   * @return Total number of events in the group.
   */
  public java.lang.Integer getTotalNumber() {
    return totalNumber;
  }

  /**
   * Sets the value of the 'totalNumber' field.
   * Total number of events in the group.
   * @param value the value to set.
   */
  public void setTotalNumber(java.lang.Integer value) {
    this.totalNumber = value;
  }

  /**
   * Creates a new groupRecord RecordBuilder.
   * @return A new groupRecord RecordBuilder
   */
  public static com.google.gcs.sdrs.mq.events.context.groupRecord.Builder newBuilder() {
    return new com.google.gcs.sdrs.mq.events.context.groupRecord.Builder();
  }

  /**
   * Creates a new groupRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new groupRecord RecordBuilder
   */
  public static com.google.gcs.sdrs.mq.events.context.groupRecord.Builder newBuilder(com.google.gcs.sdrs.mq.events.context.groupRecord.Builder other) {
    return new com.google.gcs.sdrs.mq.events.context.groupRecord.Builder(other);
  }

  /**
   * Creates a new groupRecord RecordBuilder by copying an existing groupRecord instance.
   * @param other The existing instance to copy.
   * @return A new groupRecord RecordBuilder
   */
  public static com.google.gcs.sdrs.mq.events.context.groupRecord.Builder newBuilder(com.google.gcs.sdrs.mq.events.context.groupRecord other) {
    return new com.google.gcs.sdrs.mq.events.context.groupRecord.Builder(other);
  }

  /**
   * RecordBuilder for groupRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<groupRecord>
    implements org.apache.avro.data.RecordBuilder<groupRecord> {

    /** Unique event group ID */
    private java.lang.CharSequence groupID;
    /** Event sequence in the group.  */
    private int sequenceNumber;
    /** Total number of events in the group. */
    private int totalNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.google.gcs.sdrs.mq.events.context.groupRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.groupID)) {
        this.groupID = data().deepCopy(fields()[0].schema(), other.groupID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sequenceNumber)) {
        this.sequenceNumber = data().deepCopy(fields()[1].schema(), other.sequenceNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.totalNumber)) {
        this.totalNumber = data().deepCopy(fields()[2].schema(), other.totalNumber);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing groupRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.google.gcs.sdrs.mq.events.context.groupRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.groupID)) {
        this.groupID = data().deepCopy(fields()[0].schema(), other.groupID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sequenceNumber)) {
        this.sequenceNumber = data().deepCopy(fields()[1].schema(), other.sequenceNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.totalNumber)) {
        this.totalNumber = data().deepCopy(fields()[2].schema(), other.totalNumber);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'groupID' field.
      * Unique event group ID
      * @return The value.
      */
    public java.lang.CharSequence getGroupID() {
      return groupID;
    }

    /**
      * Sets the value of the 'groupID' field.
      * Unique event group ID
      * @param value The value of 'groupID'.
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.groupRecord.Builder setGroupID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.groupID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'groupID' field has been set.
      * Unique event group ID
      * @return True if the 'groupID' field has been set, false otherwise.
      */
    public boolean hasGroupID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'groupID' field.
      * Unique event group ID
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.groupRecord.Builder clearGroupID() {
      groupID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sequenceNumber' field.
      * Event sequence in the group. 
      * @return The value.
      */
    public java.lang.Integer getSequenceNumber() {
      return sequenceNumber;
    }

    /**
      * Sets the value of the 'sequenceNumber' field.
      * Event sequence in the group. 
      * @param value The value of 'sequenceNumber'.
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.groupRecord.Builder setSequenceNumber(int value) {
      validate(fields()[1], value);
      this.sequenceNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sequenceNumber' field has been set.
      * Event sequence in the group. 
      * @return True if the 'sequenceNumber' field has been set, false otherwise.
      */
    public boolean hasSequenceNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sequenceNumber' field.
      * Event sequence in the group. 
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.groupRecord.Builder clearSequenceNumber() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalNumber' field.
      * Total number of events in the group.
      * @return The value.
      */
    public java.lang.Integer getTotalNumber() {
      return totalNumber;
    }

    /**
      * Sets the value of the 'totalNumber' field.
      * Total number of events in the group.
      * @param value The value of 'totalNumber'.
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.groupRecord.Builder setTotalNumber(int value) {
      validate(fields()[2], value);
      this.totalNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'totalNumber' field has been set.
      * Total number of events in the group.
      * @return True if the 'totalNumber' field has been set, false otherwise.
      */
    public boolean hasTotalNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'totalNumber' field.
      * Total number of events in the group.
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.groupRecord.Builder clearTotalNumber() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public groupRecord build() {
      try {
        groupRecord record = new groupRecord();
        record.groupID = fieldSetFlags()[0] ? this.groupID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sequenceNumber = fieldSetFlags()[1] ? this.sequenceNumber : (java.lang.Integer) defaultValue(fields()[1]);
        record.totalNumber = fieldSetFlags()[2] ? this.totalNumber : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<groupRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<groupRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<groupRecord>
    READER$ = (org.apache.avro.io.DatumReader<groupRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
