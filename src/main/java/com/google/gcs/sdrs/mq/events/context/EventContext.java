/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.google.gcs.sdrs.mq.events.context;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** The event context used for all events */
@org.apache.avro.specific.AvroGenerated
public class EventContext extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1827344625426174414L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventContext\",\"namespace\":\"com.google.gcs.sdrs.mq.events.context\",\"doc\":\"The event context used for all events\",\"fields\":[{\"name\":\"uuid\",\"type\":\"string\",\"doc\":\"Event UUID.\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of event.\"},{\"name\":\"correlationID\",\"type\":[\"null\",\"string\"],\"doc\":\"Unique ID that correlates multiple related events generated from a multi-stepped process.\",\"default\":null},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Time of event expressed as number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.\"},{\"name\":\"version\",\"type\":\"string\",\"doc\":\"Version of event schema\"},{\"name\":\"group\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"groupRecord\",\"fields\":[{\"name\":\"groupID\",\"type\":\"string\",\"doc\":\"Unique event group ID\"},{\"name\":\"sequenceNumber\",\"type\":\"int\",\"doc\":\"Event sequence in the group. \"},{\"name\":\"totalNumber\",\"type\":\"int\",\"doc\":\"Total number of events in the group.\"}]}],\"doc\":\"Event group. Present if event is broken into multiple messages. \",\"default\":null},{\"name\":\"attributes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Optional event attributes in key=value pairs\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EventContext> ENCODER =
      new BinaryMessageEncoder<EventContext>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EventContext> DECODER =
      new BinaryMessageDecoder<EventContext>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EventContext> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EventContext> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EventContext>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EventContext to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EventContext from a ByteBuffer. */
  public static EventContext fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Event UUID. */
  @Deprecated public java.lang.CharSequence uuid;
  /** Name of event. */
  @Deprecated public java.lang.CharSequence name;
  /** Unique ID that correlates multiple related events generated from a multi-stepped process. */
  @Deprecated public java.lang.CharSequence correlationID;
  /** Time of event expressed as number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC. */
  @Deprecated public org.joda.time.DateTime timestamp;
  /** Version of event schema */
  @Deprecated public java.lang.CharSequence version;
  /** Event group. Present if event is broken into multiple messages.  */
  @Deprecated public com.google.gcs.sdrs.mq.events.context.groupRecord group;
  /** Optional event attributes in key=value pairs */
  @Deprecated public java.util.List<java.lang.CharSequence> attributes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventContext() {}

  /**
   * All-args constructor.
   * @param uuid Event UUID.
   * @param name Name of event.
   * @param correlationID Unique ID that correlates multiple related events generated from a multi-stepped process.
   * @param timestamp Time of event expressed as number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   * @param version Version of event schema
   * @param group Event group. Present if event is broken into multiple messages. 
   * @param attributes Optional event attributes in key=value pairs
   */
  public EventContext(java.lang.CharSequence uuid, java.lang.CharSequence name, java.lang.CharSequence correlationID, org.joda.time.DateTime timestamp, java.lang.CharSequence version, com.google.gcs.sdrs.mq.events.context.groupRecord group, java.util.List<java.lang.CharSequence> attributes) {
    this.uuid = uuid;
    this.name = name;
    this.correlationID = correlationID;
    this.timestamp = timestamp;
    this.version = version;
    this.group = group;
    this.attributes = attributes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return name;
    case 2: return correlationID;
    case 3: return timestamp;
    case 4: return version;
    case 5: return group;
    case 6: return attributes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      TIMESTAMP_CONVERSION,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: correlationID = (java.lang.CharSequence)value$; break;
    case 3: timestamp = (org.joda.time.DateTime)value$; break;
    case 4: version = (java.lang.CharSequence)value$; break;
    case 5: group = (com.google.gcs.sdrs.mq.events.context.groupRecord)value$; break;
    case 6: attributes = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return Event UUID.
   */
  public java.lang.CharSequence getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * Event UUID.
   * @param value the value to set.
   */
  public void setUuid(java.lang.CharSequence value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return Name of event.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Name of event.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'correlationID' field.
   * @return Unique ID that correlates multiple related events generated from a multi-stepped process.
   */
  public java.lang.CharSequence getCorrelationID() {
    return correlationID;
  }

  /**
   * Sets the value of the 'correlationID' field.
   * Unique ID that correlates multiple related events generated from a multi-stepped process.
   * @param value the value to set.
   */
  public void setCorrelationID(java.lang.CharSequence value) {
    this.correlationID = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Time of event expressed as number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   */
  public org.joda.time.DateTime getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * Time of event expressed as number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
   * @param value the value to set.
   */
  public void setTimestamp(org.joda.time.DateTime value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return Version of event schema
   */
  public java.lang.CharSequence getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * Version of event schema
   * @param value the value to set.
   */
  public void setVersion(java.lang.CharSequence value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'group' field.
   * @return Event group. Present if event is broken into multiple messages. 
   */
  public com.google.gcs.sdrs.mq.events.context.groupRecord getGroup() {
    return group;
  }

  /**
   * Sets the value of the 'group' field.
   * Event group. Present if event is broken into multiple messages. 
   * @param value the value to set.
   */
  public void setGroup(com.google.gcs.sdrs.mq.events.context.groupRecord value) {
    this.group = value;
  }

  /**
   * Gets the value of the 'attributes' field.
   * @return Optional event attributes in key=value pairs
   */
  public java.util.List<java.lang.CharSequence> getAttributes() {
    return attributes;
  }

  /**
   * Sets the value of the 'attributes' field.
   * Optional event attributes in key=value pairs
   * @param value the value to set.
   */
  public void setAttributes(java.util.List<java.lang.CharSequence> value) {
    this.attributes = value;
  }

  /**
   * Creates a new EventContext RecordBuilder.
   * @return A new EventContext RecordBuilder
   */
  public static com.google.gcs.sdrs.mq.events.context.EventContext.Builder newBuilder() {
    return new com.google.gcs.sdrs.mq.events.context.EventContext.Builder();
  }

  /**
   * Creates a new EventContext RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventContext RecordBuilder
   */
  public static com.google.gcs.sdrs.mq.events.context.EventContext.Builder newBuilder(com.google.gcs.sdrs.mq.events.context.EventContext.Builder other) {
    return new com.google.gcs.sdrs.mq.events.context.EventContext.Builder(other);
  }

  /**
   * Creates a new EventContext RecordBuilder by copying an existing EventContext instance.
   * @param other The existing instance to copy.
   * @return A new EventContext RecordBuilder
   */
  public static com.google.gcs.sdrs.mq.events.context.EventContext.Builder newBuilder(com.google.gcs.sdrs.mq.events.context.EventContext other) {
    return new com.google.gcs.sdrs.mq.events.context.EventContext.Builder(other);
  }

  /**
   * RecordBuilder for EventContext instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventContext>
    implements org.apache.avro.data.RecordBuilder<EventContext> {

    /** Event UUID. */
    private java.lang.CharSequence uuid;
    /** Name of event. */
    private java.lang.CharSequence name;
    /** Unique ID that correlates multiple related events generated from a multi-stepped process. */
    private java.lang.CharSequence correlationID;
    /** Time of event expressed as number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC. */
    private org.joda.time.DateTime timestamp;
    /** Version of event schema */
    private java.lang.CharSequence version;
    /** Event group. Present if event is broken into multiple messages.  */
    private com.google.gcs.sdrs.mq.events.context.groupRecord group;
    private com.google.gcs.sdrs.mq.events.context.groupRecord.Builder groupBuilder;
    /** Optional event attributes in key=value pairs */
    private java.util.List<java.lang.CharSequence> attributes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.google.gcs.sdrs.mq.events.context.EventContext.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.correlationID)) {
        this.correlationID = data().deepCopy(fields()[2].schema(), other.correlationID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.version)) {
        this.version = data().deepCopy(fields()[4].schema(), other.version);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.group)) {
        this.group = data().deepCopy(fields()[5].schema(), other.group);
        fieldSetFlags()[5] = true;
      }
      if (other.hasGroupBuilder()) {
        this.groupBuilder = com.google.gcs.sdrs.mq.events.context.groupRecord.newBuilder(other.getGroupBuilder());
      }
      if (isValidValue(fields()[6], other.attributes)) {
        this.attributes = data().deepCopy(fields()[6].schema(), other.attributes);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EventContext instance
     * @param other The existing instance to copy.
     */
    private Builder(com.google.gcs.sdrs.mq.events.context.EventContext other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.correlationID)) {
        this.correlationID = data().deepCopy(fields()[2].schema(), other.correlationID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.version)) {
        this.version = data().deepCopy(fields()[4].schema(), other.version);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.group)) {
        this.group = data().deepCopy(fields()[5].schema(), other.group);
        fieldSetFlags()[5] = true;
      }
      this.groupBuilder = null;
      if (isValidValue(fields()[6], other.attributes)) {
        this.attributes = data().deepCopy(fields()[6].schema(), other.attributes);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * Event UUID.
      * @return The value.
      */
    public java.lang.CharSequence getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * Event UUID.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.EventContext.Builder setUuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * Event UUID.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * Event UUID.
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.EventContext.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Name of event.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Name of event.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.EventContext.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Name of event.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * Name of event.
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.EventContext.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'correlationID' field.
      * Unique ID that correlates multiple related events generated from a multi-stepped process.
      * @return The value.
      */
    public java.lang.CharSequence getCorrelationID() {
      return correlationID;
    }

    /**
      * Sets the value of the 'correlationID' field.
      * Unique ID that correlates multiple related events generated from a multi-stepped process.
      * @param value The value of 'correlationID'.
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.EventContext.Builder setCorrelationID(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.correlationID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'correlationID' field has been set.
      * Unique ID that correlates multiple related events generated from a multi-stepped process.
      * @return True if the 'correlationID' field has been set, false otherwise.
      */
    public boolean hasCorrelationID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'correlationID' field.
      * Unique ID that correlates multiple related events generated from a multi-stepped process.
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.EventContext.Builder clearCorrelationID() {
      correlationID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Time of event expressed as number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return The value.
      */
    public org.joda.time.DateTime getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * Time of event expressed as number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.EventContext.Builder setTimestamp(org.joda.time.DateTime value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Time of event expressed as number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Time of event expressed as number of milliseconds from the unix epoch, 1 January 1970 00:00:00.000 UTC.
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.EventContext.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * Version of event schema
      * @return The value.
      */
    public java.lang.CharSequence getVersion() {
      return version;
    }

    /**
      * Sets the value of the 'version' field.
      * Version of event schema
      * @param value The value of 'version'.
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.EventContext.Builder setVersion(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.version = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * Version of event schema
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'version' field.
      * Version of event schema
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.EventContext.Builder clearVersion() {
      version = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'group' field.
      * Event group. Present if event is broken into multiple messages. 
      * @return The value.
      */
    public com.google.gcs.sdrs.mq.events.context.groupRecord getGroup() {
      return group;
    }

    /**
      * Sets the value of the 'group' field.
      * Event group. Present if event is broken into multiple messages. 
      * @param value The value of 'group'.
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.EventContext.Builder setGroup(com.google.gcs.sdrs.mq.events.context.groupRecord value) {
      validate(fields()[5], value);
      this.groupBuilder = null;
      this.group = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'group' field has been set.
      * Event group. Present if event is broken into multiple messages. 
      * @return True if the 'group' field has been set, false otherwise.
      */
    public boolean hasGroup() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'group' field and creates one if it doesn't exist yet.
     * Event group. Present if event is broken into multiple messages. 
     * @return This builder.
     */
    public com.google.gcs.sdrs.mq.events.context.groupRecord.Builder getGroupBuilder() {
      if (groupBuilder == null) {
        if (hasGroup()) {
          setGroupBuilder(com.google.gcs.sdrs.mq.events.context.groupRecord.newBuilder(group));
        } else {
          setGroupBuilder(com.google.gcs.sdrs.mq.events.context.groupRecord.newBuilder());
        }
      }
      return groupBuilder;
    }

    /**
     * Sets the Builder instance for the 'group' field
     * Event group. Present if event is broken into multiple messages. 
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.google.gcs.sdrs.mq.events.context.EventContext.Builder setGroupBuilder(com.google.gcs.sdrs.mq.events.context.groupRecord.Builder value) {
      clearGroup();
      groupBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'group' field has an active Builder instance
     * Event group. Present if event is broken into multiple messages. 
     * @return True if the 'group' field has an active Builder instance
     */
    public boolean hasGroupBuilder() {
      return groupBuilder != null;
    }

    /**
      * Clears the value of the 'group' field.
      * Event group. Present if event is broken into multiple messages. 
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.EventContext.Builder clearGroup() {
      group = null;
      groupBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'attributes' field.
      * Optional event attributes in key=value pairs
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAttributes() {
      return attributes;
    }

    /**
      * Sets the value of the 'attributes' field.
      * Optional event attributes in key=value pairs
      * @param value The value of 'attributes'.
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.EventContext.Builder setAttributes(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.attributes = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'attributes' field has been set.
      * Optional event attributes in key=value pairs
      * @return True if the 'attributes' field has been set, false otherwise.
      */
    public boolean hasAttributes() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'attributes' field.
      * Optional event attributes in key=value pairs
      * @return This builder.
      */
    public com.google.gcs.sdrs.mq.events.context.EventContext.Builder clearAttributes() {
      attributes = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EventContext build() {
      try {
        EventContext record = new EventContext();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[0], record.getConversion(0));
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1], record.getConversion(1));
        record.correlationID = fieldSetFlags()[2] ? this.correlationID : (java.lang.CharSequence) defaultValue(fields()[2], record.getConversion(2));
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (org.joda.time.DateTime) defaultValue(fields()[3], record.getConversion(3));
        record.version = fieldSetFlags()[4] ? this.version : (java.lang.CharSequence) defaultValue(fields()[4], record.getConversion(4));
        if (groupBuilder != null) {
          record.group = this.groupBuilder.build();
        } else {
          record.group = fieldSetFlags()[5] ? this.group : (com.google.gcs.sdrs.mq.events.context.groupRecord) defaultValue(fields()[5], record.getConversion(5));
        }
        record.attributes = fieldSetFlags()[6] ? this.attributes : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[6], record.getConversion(6));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EventContext>
    WRITER$ = (org.apache.avro.io.DatumWriter<EventContext>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EventContext>
    READER$ = (org.apache.avro.io.DatumReader<EventContext>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
